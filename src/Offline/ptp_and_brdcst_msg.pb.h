// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ptp_and_brdcst_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ptp_5fand_5fbrdcst_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ptp_5fand_5fbrdcst_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ptp_5fand_5fbrdcst_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ptp_5fand_5fbrdcst_5fmsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ptp_5fand_5fbrdcst_5fmsg_2eproto;
class BroadcastTransformShare;
struct BroadcastTransformShareDefaultTypeInternal;
extern BroadcastTransformShareDefaultTypeInternal _BroadcastTransformShare_default_instance_;
class BroadcastTransformShareMsg;
struct BroadcastTransformShareMsgDefaultTypeInternal;
extern BroadcastTransformShareMsgDefaultTypeInternal _BroadcastTransformShareMsg_default_instance_;
class TransformedShare;
struct TransformedShareDefaultTypeInternal;
extern TransformedShareDefaultTypeInternal _TransformedShare_default_instance_;
class TransformedShareMsg;
struct TransformedShareMsgDefaultTypeInternal;
extern TransformedShareMsgDefaultTypeInternal _TransformedShareMsg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BroadcastTransformShare* Arena::CreateMaybeMessage<::BroadcastTransformShare>(Arena*);
template<> ::BroadcastTransformShareMsg* Arena::CreateMaybeMessage<::BroadcastTransformShareMsg>(Arena*);
template<> ::TransformedShare* Arena::CreateMaybeMessage<::TransformedShare>(Arena*);
template<> ::TransformedShareMsg* Arena::CreateMaybeMessage<::TransformedShareMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class BroadcastTransformShare final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BroadcastTransformShare) */ {
 public:
  inline BroadcastTransformShare() : BroadcastTransformShare(nullptr) {}
  ~BroadcastTransformShare() override;
  explicit PROTOBUF_CONSTEXPR BroadcastTransformShare(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastTransformShare(const BroadcastTransformShare& from);
  BroadcastTransformShare(BroadcastTransformShare&& from) noexcept
    : BroadcastTransformShare() {
    *this = ::std::move(from);
  }

  inline BroadcastTransformShare& operator=(const BroadcastTransformShare& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastTransformShare& operator=(BroadcastTransformShare&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastTransformShare& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastTransformShare* internal_default_instance() {
    return reinterpret_cast<const BroadcastTransformShare*>(
               &_BroadcastTransformShare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BroadcastTransformShare& a, BroadcastTransformShare& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastTransformShare* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastTransformShare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastTransformShare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastTransformShare>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadcastTransformShare& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BroadcastTransformShare& from) {
    BroadcastTransformShare::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastTransformShare* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BroadcastTransformShare";
  }
  protected:
  explicit BroadcastTransformShare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAAaFieldNumber = 1,
    kAlphaBaFieldNumber = 2,
    kBAbFieldNumber = 3,
    kAlphaBbFieldNumber = 4,
    kCAcFieldNumber = 5,
    kAlphaBcFieldNumber = 6,
  };
  // string a_aa = 1;
  void clear_a_aa();
  const std::string& a_aa() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_a_aa(ArgT0&& arg0, ArgT... args);
  std::string* mutable_a_aa();
  PROTOBUF_NODISCARD std::string* release_a_aa();
  void set_allocated_a_aa(std::string* a_aa);
  private:
  const std::string& _internal_a_aa() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a_aa(const std::string& value);
  std::string* _internal_mutable_a_aa();
  public:

  // string alpha_ba = 2;
  void clear_alpha_ba();
  const std::string& alpha_ba() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alpha_ba(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alpha_ba();
  PROTOBUF_NODISCARD std::string* release_alpha_ba();
  void set_allocated_alpha_ba(std::string* alpha_ba);
  private:
  const std::string& _internal_alpha_ba() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alpha_ba(const std::string& value);
  std::string* _internal_mutable_alpha_ba();
  public:

  // string b_ab = 3;
  void clear_b_ab();
  const std::string& b_ab() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_b_ab(ArgT0&& arg0, ArgT... args);
  std::string* mutable_b_ab();
  PROTOBUF_NODISCARD std::string* release_b_ab();
  void set_allocated_b_ab(std::string* b_ab);
  private:
  const std::string& _internal_b_ab() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_b_ab(const std::string& value);
  std::string* _internal_mutable_b_ab();
  public:

  // string alpha_bb = 4;
  void clear_alpha_bb();
  const std::string& alpha_bb() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alpha_bb(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alpha_bb();
  PROTOBUF_NODISCARD std::string* release_alpha_bb();
  void set_allocated_alpha_bb(std::string* alpha_bb);
  private:
  const std::string& _internal_alpha_bb() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alpha_bb(const std::string& value);
  std::string* _internal_mutable_alpha_bb();
  public:

  // string c_ac = 5;
  void clear_c_ac();
  const std::string& c_ac() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_c_ac(ArgT0&& arg0, ArgT... args);
  std::string* mutable_c_ac();
  PROTOBUF_NODISCARD std::string* release_c_ac();
  void set_allocated_c_ac(std::string* c_ac);
  private:
  const std::string& _internal_c_ac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_c_ac(const std::string& value);
  std::string* _internal_mutable_c_ac();
  public:

  // string alpha_bc = 6;
  void clear_alpha_bc();
  const std::string& alpha_bc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alpha_bc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alpha_bc();
  PROTOBUF_NODISCARD std::string* release_alpha_bc();
  void set_allocated_alpha_bc(std::string* alpha_bc);
  private:
  const std::string& _internal_alpha_bc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alpha_bc(const std::string& value);
  std::string* _internal_mutable_alpha_bc();
  public:

  // @@protoc_insertion_point(class_scope:BroadcastTransformShare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_aa_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alpha_ba_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_ab_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alpha_bb_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c_ac_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alpha_bc_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ptp_5fand_5fbrdcst_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class TransformedShare final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransformedShare) */ {
 public:
  inline TransformedShare() : TransformedShare(nullptr) {}
  ~TransformedShare() override;
  explicit PROTOBUF_CONSTEXPR TransformedShare(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformedShare(const TransformedShare& from);
  TransformedShare(TransformedShare&& from) noexcept
    : TransformedShare() {
    *this = ::std::move(from);
  }

  inline TransformedShare& operator=(const TransformedShare& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformedShare& operator=(TransformedShare&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformedShare& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformedShare* internal_default_instance() {
    return reinterpret_cast<const TransformedShare*>(
               &_TransformedShare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransformedShare& a, TransformedShare& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformedShare* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformedShare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformedShare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformedShare>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformedShare& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformedShare& from) {
    TransformedShare::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformedShare* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransformedShare";
  }
  protected:
  explicit TransformedShare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShareAFieldNumber = 1,
    kShareBFieldNumber = 2,
    kShareCFieldNumber = 3,
    kAssociatedCAFieldNumber = 4,
    kAssociatedCBFieldNumber = 5,
    kAssociatedCCFieldNumber = 6,
  };
  // string share_a = 1;
  void clear_share_a();
  const std::string& share_a() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_share_a(ArgT0&& arg0, ArgT... args);
  std::string* mutable_share_a();
  PROTOBUF_NODISCARD std::string* release_share_a();
  void set_allocated_share_a(std::string* share_a);
  private:
  const std::string& _internal_share_a() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_share_a(const std::string& value);
  std::string* _internal_mutable_share_a();
  public:

  // string share_b = 2;
  void clear_share_b();
  const std::string& share_b() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_share_b(ArgT0&& arg0, ArgT... args);
  std::string* mutable_share_b();
  PROTOBUF_NODISCARD std::string* release_share_b();
  void set_allocated_share_b(std::string* share_b);
  private:
  const std::string& _internal_share_b() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_share_b(const std::string& value);
  std::string* _internal_mutable_share_b();
  public:

  // string share_c = 3;
  void clear_share_c();
  const std::string& share_c() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_share_c(ArgT0&& arg0, ArgT... args);
  std::string* mutable_share_c();
  PROTOBUF_NODISCARD std::string* release_share_c();
  void set_allocated_share_c(std::string* share_c);
  private:
  const std::string& _internal_share_c() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_share_c(const std::string& value);
  std::string* _internal_mutable_share_c();
  public:

  // string associated_c_a = 4;
  void clear_associated_c_a();
  const std::string& associated_c_a() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_associated_c_a(ArgT0&& arg0, ArgT... args);
  std::string* mutable_associated_c_a();
  PROTOBUF_NODISCARD std::string* release_associated_c_a();
  void set_allocated_associated_c_a(std::string* associated_c_a);
  private:
  const std::string& _internal_associated_c_a() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_associated_c_a(const std::string& value);
  std::string* _internal_mutable_associated_c_a();
  public:

  // string associated_c_b = 5;
  void clear_associated_c_b();
  const std::string& associated_c_b() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_associated_c_b(ArgT0&& arg0, ArgT... args);
  std::string* mutable_associated_c_b();
  PROTOBUF_NODISCARD std::string* release_associated_c_b();
  void set_allocated_associated_c_b(std::string* associated_c_b);
  private:
  const std::string& _internal_associated_c_b() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_associated_c_b(const std::string& value);
  std::string* _internal_mutable_associated_c_b();
  public:

  // string associated_c_c = 6;
  void clear_associated_c_c();
  const std::string& associated_c_c() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_associated_c_c(ArgT0&& arg0, ArgT... args);
  std::string* mutable_associated_c_c();
  PROTOBUF_NODISCARD std::string* release_associated_c_c();
  void set_allocated_associated_c_c(std::string* associated_c_c);
  private:
  const std::string& _internal_associated_c_c() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_associated_c_c(const std::string& value);
  std::string* _internal_mutable_associated_c_c();
  public:

  // @@protoc_insertion_point(class_scope:TransformedShare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr share_a_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr share_b_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr share_c_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associated_c_a_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associated_c_b_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associated_c_c_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ptp_5fand_5fbrdcst_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class TransformedShareMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransformedShareMsg) */ {
 public:
  inline TransformedShareMsg() : TransformedShareMsg(nullptr) {}
  ~TransformedShareMsg() override;
  explicit PROTOBUF_CONSTEXPR TransformedShareMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformedShareMsg(const TransformedShareMsg& from);
  TransformedShareMsg(TransformedShareMsg&& from) noexcept
    : TransformedShareMsg() {
    *this = ::std::move(from);
  }

  inline TransformedShareMsg& operator=(const TransformedShareMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformedShareMsg& operator=(TransformedShareMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformedShareMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformedShareMsg* internal_default_instance() {
    return reinterpret_cast<const TransformedShareMsg*>(
               &_TransformedShareMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransformedShareMsg& a, TransformedShareMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformedShareMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformedShareMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformedShareMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformedShareMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformedShareMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformedShareMsg& from) {
    TransformedShareMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformedShareMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransformedShareMsg";
  }
  protected:
  explicit TransformedShareMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformedShareFieldNumber = 2,
    kCoeffFieldNumber = 1,
  };
  // repeated .TransformedShare transformedShare = 2;
  int transformedshare_size() const;
  private:
  int _internal_transformedshare_size() const;
  public:
  void clear_transformedshare();
  ::TransformedShare* mutable_transformedshare(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransformedShare >*
      mutable_transformedshare();
  private:
  const ::TransformedShare& _internal_transformedshare(int index) const;
  ::TransformedShare* _internal_add_transformedshare();
  public:
  const ::TransformedShare& transformedshare(int index) const;
  ::TransformedShare* add_transformedshare();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransformedShare >&
      transformedshare() const;

  // int32 coeff = 1;
  void clear_coeff();
  int32_t coeff() const;
  void set_coeff(int32_t value);
  private:
  int32_t _internal_coeff() const;
  void _internal_set_coeff(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TransformedShareMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransformedShare > transformedshare_;
    int32_t coeff_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ptp_5fand_5fbrdcst_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class BroadcastTransformShareMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BroadcastTransformShareMsg) */ {
 public:
  inline BroadcastTransformShareMsg() : BroadcastTransformShareMsg(nullptr) {}
  ~BroadcastTransformShareMsg() override;
  explicit PROTOBUF_CONSTEXPR BroadcastTransformShareMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastTransformShareMsg(const BroadcastTransformShareMsg& from);
  BroadcastTransformShareMsg(BroadcastTransformShareMsg&& from) noexcept
    : BroadcastTransformShareMsg() {
    *this = ::std::move(from);
  }

  inline BroadcastTransformShareMsg& operator=(const BroadcastTransformShareMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastTransformShareMsg& operator=(BroadcastTransformShareMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastTransformShareMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastTransformShareMsg* internal_default_instance() {
    return reinterpret_cast<const BroadcastTransformShareMsg*>(
               &_BroadcastTransformShareMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BroadcastTransformShareMsg& a, BroadcastTransformShareMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastTransformShareMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastTransformShareMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastTransformShareMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastTransformShareMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadcastTransformShareMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BroadcastTransformShareMsg& from) {
    BroadcastTransformShareMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastTransformShareMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BroadcastTransformShareMsg";
  }
  protected:
  explicit BroadcastTransformShareMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastFieldNumber = 1,
    kCoeffFieldNumber = 2,
  };
  // repeated .BroadcastTransformShare broadcast = 1;
  int broadcast_size() const;
  private:
  int _internal_broadcast_size() const;
  public:
  void clear_broadcast();
  ::BroadcastTransformShare* mutable_broadcast(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BroadcastTransformShare >*
      mutable_broadcast();
  private:
  const ::BroadcastTransformShare& _internal_broadcast(int index) const;
  ::BroadcastTransformShare* _internal_add_broadcast();
  public:
  const ::BroadcastTransformShare& broadcast(int index) const;
  ::BroadcastTransformShare* add_broadcast();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BroadcastTransformShare >&
      broadcast() const;

  // int32 coeff = 2;
  void clear_coeff();
  int32_t coeff() const;
  void set_coeff(int32_t value);
  private:
  int32_t _internal_coeff() const;
  void _internal_set_coeff(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:BroadcastTransformShareMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BroadcastTransformShare > broadcast_;
    int32_t coeff_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ptp_5fand_5fbrdcst_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BroadcastTransformShare

// string a_aa = 1;
inline void BroadcastTransformShare::clear_a_aa() {
  _impl_.a_aa_.ClearToEmpty();
}
inline const std::string& BroadcastTransformShare::a_aa() const {
  // @@protoc_insertion_point(field_get:BroadcastTransformShare.a_aa)
  return _internal_a_aa();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastTransformShare::set_a_aa(ArgT0&& arg0, ArgT... args) {
 
 _impl_.a_aa_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BroadcastTransformShare.a_aa)
}
inline std::string* BroadcastTransformShare::mutable_a_aa() {
  std::string* _s = _internal_mutable_a_aa();
  // @@protoc_insertion_point(field_mutable:BroadcastTransformShare.a_aa)
  return _s;
}
inline const std::string& BroadcastTransformShare::_internal_a_aa() const {
  return _impl_.a_aa_.Get();
}
inline void BroadcastTransformShare::_internal_set_a_aa(const std::string& value) {
  
  _impl_.a_aa_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastTransformShare::_internal_mutable_a_aa() {
  
  return _impl_.a_aa_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadcastTransformShare::release_a_aa() {
  // @@protoc_insertion_point(field_release:BroadcastTransformShare.a_aa)
  return _impl_.a_aa_.Release();
}
inline void BroadcastTransformShare::set_allocated_a_aa(std::string* a_aa) {
  if (a_aa != nullptr) {
    
  } else {
    
  }
  _impl_.a_aa_.SetAllocated(a_aa, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.a_aa_.IsDefault()) {
    _impl_.a_aa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BroadcastTransformShare.a_aa)
}

// string alpha_ba = 2;
inline void BroadcastTransformShare::clear_alpha_ba() {
  _impl_.alpha_ba_.ClearToEmpty();
}
inline const std::string& BroadcastTransformShare::alpha_ba() const {
  // @@protoc_insertion_point(field_get:BroadcastTransformShare.alpha_ba)
  return _internal_alpha_ba();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastTransformShare::set_alpha_ba(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alpha_ba_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BroadcastTransformShare.alpha_ba)
}
inline std::string* BroadcastTransformShare::mutable_alpha_ba() {
  std::string* _s = _internal_mutable_alpha_ba();
  // @@protoc_insertion_point(field_mutable:BroadcastTransformShare.alpha_ba)
  return _s;
}
inline const std::string& BroadcastTransformShare::_internal_alpha_ba() const {
  return _impl_.alpha_ba_.Get();
}
inline void BroadcastTransformShare::_internal_set_alpha_ba(const std::string& value) {
  
  _impl_.alpha_ba_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastTransformShare::_internal_mutable_alpha_ba() {
  
  return _impl_.alpha_ba_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadcastTransformShare::release_alpha_ba() {
  // @@protoc_insertion_point(field_release:BroadcastTransformShare.alpha_ba)
  return _impl_.alpha_ba_.Release();
}
inline void BroadcastTransformShare::set_allocated_alpha_ba(std::string* alpha_ba) {
  if (alpha_ba != nullptr) {
    
  } else {
    
  }
  _impl_.alpha_ba_.SetAllocated(alpha_ba, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alpha_ba_.IsDefault()) {
    _impl_.alpha_ba_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BroadcastTransformShare.alpha_ba)
}

// string b_ab = 3;
inline void BroadcastTransformShare::clear_b_ab() {
  _impl_.b_ab_.ClearToEmpty();
}
inline const std::string& BroadcastTransformShare::b_ab() const {
  // @@protoc_insertion_point(field_get:BroadcastTransformShare.b_ab)
  return _internal_b_ab();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastTransformShare::set_b_ab(ArgT0&& arg0, ArgT... args) {
 
 _impl_.b_ab_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BroadcastTransformShare.b_ab)
}
inline std::string* BroadcastTransformShare::mutable_b_ab() {
  std::string* _s = _internal_mutable_b_ab();
  // @@protoc_insertion_point(field_mutable:BroadcastTransformShare.b_ab)
  return _s;
}
inline const std::string& BroadcastTransformShare::_internal_b_ab() const {
  return _impl_.b_ab_.Get();
}
inline void BroadcastTransformShare::_internal_set_b_ab(const std::string& value) {
  
  _impl_.b_ab_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastTransformShare::_internal_mutable_b_ab() {
  
  return _impl_.b_ab_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadcastTransformShare::release_b_ab() {
  // @@protoc_insertion_point(field_release:BroadcastTransformShare.b_ab)
  return _impl_.b_ab_.Release();
}
inline void BroadcastTransformShare::set_allocated_b_ab(std::string* b_ab) {
  if (b_ab != nullptr) {
    
  } else {
    
  }
  _impl_.b_ab_.SetAllocated(b_ab, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.b_ab_.IsDefault()) {
    _impl_.b_ab_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BroadcastTransformShare.b_ab)
}

// string alpha_bb = 4;
inline void BroadcastTransformShare::clear_alpha_bb() {
  _impl_.alpha_bb_.ClearToEmpty();
}
inline const std::string& BroadcastTransformShare::alpha_bb() const {
  // @@protoc_insertion_point(field_get:BroadcastTransformShare.alpha_bb)
  return _internal_alpha_bb();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastTransformShare::set_alpha_bb(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alpha_bb_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BroadcastTransformShare.alpha_bb)
}
inline std::string* BroadcastTransformShare::mutable_alpha_bb() {
  std::string* _s = _internal_mutable_alpha_bb();
  // @@protoc_insertion_point(field_mutable:BroadcastTransformShare.alpha_bb)
  return _s;
}
inline const std::string& BroadcastTransformShare::_internal_alpha_bb() const {
  return _impl_.alpha_bb_.Get();
}
inline void BroadcastTransformShare::_internal_set_alpha_bb(const std::string& value) {
  
  _impl_.alpha_bb_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastTransformShare::_internal_mutable_alpha_bb() {
  
  return _impl_.alpha_bb_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadcastTransformShare::release_alpha_bb() {
  // @@protoc_insertion_point(field_release:BroadcastTransformShare.alpha_bb)
  return _impl_.alpha_bb_.Release();
}
inline void BroadcastTransformShare::set_allocated_alpha_bb(std::string* alpha_bb) {
  if (alpha_bb != nullptr) {
    
  } else {
    
  }
  _impl_.alpha_bb_.SetAllocated(alpha_bb, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alpha_bb_.IsDefault()) {
    _impl_.alpha_bb_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BroadcastTransformShare.alpha_bb)
}

// string c_ac = 5;
inline void BroadcastTransformShare::clear_c_ac() {
  _impl_.c_ac_.ClearToEmpty();
}
inline const std::string& BroadcastTransformShare::c_ac() const {
  // @@protoc_insertion_point(field_get:BroadcastTransformShare.c_ac)
  return _internal_c_ac();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastTransformShare::set_c_ac(ArgT0&& arg0, ArgT... args) {
 
 _impl_.c_ac_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BroadcastTransformShare.c_ac)
}
inline std::string* BroadcastTransformShare::mutable_c_ac() {
  std::string* _s = _internal_mutable_c_ac();
  // @@protoc_insertion_point(field_mutable:BroadcastTransformShare.c_ac)
  return _s;
}
inline const std::string& BroadcastTransformShare::_internal_c_ac() const {
  return _impl_.c_ac_.Get();
}
inline void BroadcastTransformShare::_internal_set_c_ac(const std::string& value) {
  
  _impl_.c_ac_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastTransformShare::_internal_mutable_c_ac() {
  
  return _impl_.c_ac_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadcastTransformShare::release_c_ac() {
  // @@protoc_insertion_point(field_release:BroadcastTransformShare.c_ac)
  return _impl_.c_ac_.Release();
}
inline void BroadcastTransformShare::set_allocated_c_ac(std::string* c_ac) {
  if (c_ac != nullptr) {
    
  } else {
    
  }
  _impl_.c_ac_.SetAllocated(c_ac, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.c_ac_.IsDefault()) {
    _impl_.c_ac_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BroadcastTransformShare.c_ac)
}

// string alpha_bc = 6;
inline void BroadcastTransformShare::clear_alpha_bc() {
  _impl_.alpha_bc_.ClearToEmpty();
}
inline const std::string& BroadcastTransformShare::alpha_bc() const {
  // @@protoc_insertion_point(field_get:BroadcastTransformShare.alpha_bc)
  return _internal_alpha_bc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastTransformShare::set_alpha_bc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alpha_bc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BroadcastTransformShare.alpha_bc)
}
inline std::string* BroadcastTransformShare::mutable_alpha_bc() {
  std::string* _s = _internal_mutable_alpha_bc();
  // @@protoc_insertion_point(field_mutable:BroadcastTransformShare.alpha_bc)
  return _s;
}
inline const std::string& BroadcastTransformShare::_internal_alpha_bc() const {
  return _impl_.alpha_bc_.Get();
}
inline void BroadcastTransformShare::_internal_set_alpha_bc(const std::string& value) {
  
  _impl_.alpha_bc_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastTransformShare::_internal_mutable_alpha_bc() {
  
  return _impl_.alpha_bc_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadcastTransformShare::release_alpha_bc() {
  // @@protoc_insertion_point(field_release:BroadcastTransformShare.alpha_bc)
  return _impl_.alpha_bc_.Release();
}
inline void BroadcastTransformShare::set_allocated_alpha_bc(std::string* alpha_bc) {
  if (alpha_bc != nullptr) {
    
  } else {
    
  }
  _impl_.alpha_bc_.SetAllocated(alpha_bc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alpha_bc_.IsDefault()) {
    _impl_.alpha_bc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BroadcastTransformShare.alpha_bc)
}

// -------------------------------------------------------------------

// TransformedShare

// string share_a = 1;
inline void TransformedShare::clear_share_a() {
  _impl_.share_a_.ClearToEmpty();
}
inline const std::string& TransformedShare::share_a() const {
  // @@protoc_insertion_point(field_get:TransformedShare.share_a)
  return _internal_share_a();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformedShare::set_share_a(ArgT0&& arg0, ArgT... args) {
 
 _impl_.share_a_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TransformedShare.share_a)
}
inline std::string* TransformedShare::mutable_share_a() {
  std::string* _s = _internal_mutable_share_a();
  // @@protoc_insertion_point(field_mutable:TransformedShare.share_a)
  return _s;
}
inline const std::string& TransformedShare::_internal_share_a() const {
  return _impl_.share_a_.Get();
}
inline void TransformedShare::_internal_set_share_a(const std::string& value) {
  
  _impl_.share_a_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformedShare::_internal_mutable_share_a() {
  
  return _impl_.share_a_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformedShare::release_share_a() {
  // @@protoc_insertion_point(field_release:TransformedShare.share_a)
  return _impl_.share_a_.Release();
}
inline void TransformedShare::set_allocated_share_a(std::string* share_a) {
  if (share_a != nullptr) {
    
  } else {
    
  }
  _impl_.share_a_.SetAllocated(share_a, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.share_a_.IsDefault()) {
    _impl_.share_a_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TransformedShare.share_a)
}

// string share_b = 2;
inline void TransformedShare::clear_share_b() {
  _impl_.share_b_.ClearToEmpty();
}
inline const std::string& TransformedShare::share_b() const {
  // @@protoc_insertion_point(field_get:TransformedShare.share_b)
  return _internal_share_b();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformedShare::set_share_b(ArgT0&& arg0, ArgT... args) {
 
 _impl_.share_b_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TransformedShare.share_b)
}
inline std::string* TransformedShare::mutable_share_b() {
  std::string* _s = _internal_mutable_share_b();
  // @@protoc_insertion_point(field_mutable:TransformedShare.share_b)
  return _s;
}
inline const std::string& TransformedShare::_internal_share_b() const {
  return _impl_.share_b_.Get();
}
inline void TransformedShare::_internal_set_share_b(const std::string& value) {
  
  _impl_.share_b_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformedShare::_internal_mutable_share_b() {
  
  return _impl_.share_b_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformedShare::release_share_b() {
  // @@protoc_insertion_point(field_release:TransformedShare.share_b)
  return _impl_.share_b_.Release();
}
inline void TransformedShare::set_allocated_share_b(std::string* share_b) {
  if (share_b != nullptr) {
    
  } else {
    
  }
  _impl_.share_b_.SetAllocated(share_b, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.share_b_.IsDefault()) {
    _impl_.share_b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TransformedShare.share_b)
}

// string share_c = 3;
inline void TransformedShare::clear_share_c() {
  _impl_.share_c_.ClearToEmpty();
}
inline const std::string& TransformedShare::share_c() const {
  // @@protoc_insertion_point(field_get:TransformedShare.share_c)
  return _internal_share_c();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformedShare::set_share_c(ArgT0&& arg0, ArgT... args) {
 
 _impl_.share_c_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TransformedShare.share_c)
}
inline std::string* TransformedShare::mutable_share_c() {
  std::string* _s = _internal_mutable_share_c();
  // @@protoc_insertion_point(field_mutable:TransformedShare.share_c)
  return _s;
}
inline const std::string& TransformedShare::_internal_share_c() const {
  return _impl_.share_c_.Get();
}
inline void TransformedShare::_internal_set_share_c(const std::string& value) {
  
  _impl_.share_c_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformedShare::_internal_mutable_share_c() {
  
  return _impl_.share_c_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformedShare::release_share_c() {
  // @@protoc_insertion_point(field_release:TransformedShare.share_c)
  return _impl_.share_c_.Release();
}
inline void TransformedShare::set_allocated_share_c(std::string* share_c) {
  if (share_c != nullptr) {
    
  } else {
    
  }
  _impl_.share_c_.SetAllocated(share_c, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.share_c_.IsDefault()) {
    _impl_.share_c_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TransformedShare.share_c)
}

// string associated_c_a = 4;
inline void TransformedShare::clear_associated_c_a() {
  _impl_.associated_c_a_.ClearToEmpty();
}
inline const std::string& TransformedShare::associated_c_a() const {
  // @@protoc_insertion_point(field_get:TransformedShare.associated_c_a)
  return _internal_associated_c_a();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformedShare::set_associated_c_a(ArgT0&& arg0, ArgT... args) {
 
 _impl_.associated_c_a_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TransformedShare.associated_c_a)
}
inline std::string* TransformedShare::mutable_associated_c_a() {
  std::string* _s = _internal_mutable_associated_c_a();
  // @@protoc_insertion_point(field_mutable:TransformedShare.associated_c_a)
  return _s;
}
inline const std::string& TransformedShare::_internal_associated_c_a() const {
  return _impl_.associated_c_a_.Get();
}
inline void TransformedShare::_internal_set_associated_c_a(const std::string& value) {
  
  _impl_.associated_c_a_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformedShare::_internal_mutable_associated_c_a() {
  
  return _impl_.associated_c_a_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformedShare::release_associated_c_a() {
  // @@protoc_insertion_point(field_release:TransformedShare.associated_c_a)
  return _impl_.associated_c_a_.Release();
}
inline void TransformedShare::set_allocated_associated_c_a(std::string* associated_c_a) {
  if (associated_c_a != nullptr) {
    
  } else {
    
  }
  _impl_.associated_c_a_.SetAllocated(associated_c_a, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.associated_c_a_.IsDefault()) {
    _impl_.associated_c_a_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TransformedShare.associated_c_a)
}

// string associated_c_b = 5;
inline void TransformedShare::clear_associated_c_b() {
  _impl_.associated_c_b_.ClearToEmpty();
}
inline const std::string& TransformedShare::associated_c_b() const {
  // @@protoc_insertion_point(field_get:TransformedShare.associated_c_b)
  return _internal_associated_c_b();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformedShare::set_associated_c_b(ArgT0&& arg0, ArgT... args) {
 
 _impl_.associated_c_b_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TransformedShare.associated_c_b)
}
inline std::string* TransformedShare::mutable_associated_c_b() {
  std::string* _s = _internal_mutable_associated_c_b();
  // @@protoc_insertion_point(field_mutable:TransformedShare.associated_c_b)
  return _s;
}
inline const std::string& TransformedShare::_internal_associated_c_b() const {
  return _impl_.associated_c_b_.Get();
}
inline void TransformedShare::_internal_set_associated_c_b(const std::string& value) {
  
  _impl_.associated_c_b_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformedShare::_internal_mutable_associated_c_b() {
  
  return _impl_.associated_c_b_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformedShare::release_associated_c_b() {
  // @@protoc_insertion_point(field_release:TransformedShare.associated_c_b)
  return _impl_.associated_c_b_.Release();
}
inline void TransformedShare::set_allocated_associated_c_b(std::string* associated_c_b) {
  if (associated_c_b != nullptr) {
    
  } else {
    
  }
  _impl_.associated_c_b_.SetAllocated(associated_c_b, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.associated_c_b_.IsDefault()) {
    _impl_.associated_c_b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TransformedShare.associated_c_b)
}

// string associated_c_c = 6;
inline void TransformedShare::clear_associated_c_c() {
  _impl_.associated_c_c_.ClearToEmpty();
}
inline const std::string& TransformedShare::associated_c_c() const {
  // @@protoc_insertion_point(field_get:TransformedShare.associated_c_c)
  return _internal_associated_c_c();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformedShare::set_associated_c_c(ArgT0&& arg0, ArgT... args) {
 
 _impl_.associated_c_c_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TransformedShare.associated_c_c)
}
inline std::string* TransformedShare::mutable_associated_c_c() {
  std::string* _s = _internal_mutable_associated_c_c();
  // @@protoc_insertion_point(field_mutable:TransformedShare.associated_c_c)
  return _s;
}
inline const std::string& TransformedShare::_internal_associated_c_c() const {
  return _impl_.associated_c_c_.Get();
}
inline void TransformedShare::_internal_set_associated_c_c(const std::string& value) {
  
  _impl_.associated_c_c_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformedShare::_internal_mutable_associated_c_c() {
  
  return _impl_.associated_c_c_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformedShare::release_associated_c_c() {
  // @@protoc_insertion_point(field_release:TransformedShare.associated_c_c)
  return _impl_.associated_c_c_.Release();
}
inline void TransformedShare::set_allocated_associated_c_c(std::string* associated_c_c) {
  if (associated_c_c != nullptr) {
    
  } else {
    
  }
  _impl_.associated_c_c_.SetAllocated(associated_c_c, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.associated_c_c_.IsDefault()) {
    _impl_.associated_c_c_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TransformedShare.associated_c_c)
}

// -------------------------------------------------------------------

// TransformedShareMsg

// int32 coeff = 1;
inline void TransformedShareMsg::clear_coeff() {
  _impl_.coeff_ = 0;
}
inline int32_t TransformedShareMsg::_internal_coeff() const {
  return _impl_.coeff_;
}
inline int32_t TransformedShareMsg::coeff() const {
  // @@protoc_insertion_point(field_get:TransformedShareMsg.coeff)
  return _internal_coeff();
}
inline void TransformedShareMsg::_internal_set_coeff(int32_t value) {
  
  _impl_.coeff_ = value;
}
inline void TransformedShareMsg::set_coeff(int32_t value) {
  _internal_set_coeff(value);
  // @@protoc_insertion_point(field_set:TransformedShareMsg.coeff)
}

// repeated .TransformedShare transformedShare = 2;
inline int TransformedShareMsg::_internal_transformedshare_size() const {
  return _impl_.transformedshare_.size();
}
inline int TransformedShareMsg::transformedshare_size() const {
  return _internal_transformedshare_size();
}
inline void TransformedShareMsg::clear_transformedshare() {
  _impl_.transformedshare_.Clear();
}
inline ::TransformedShare* TransformedShareMsg::mutable_transformedshare(int index) {
  // @@protoc_insertion_point(field_mutable:TransformedShareMsg.transformedShare)
  return _impl_.transformedshare_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransformedShare >*
TransformedShareMsg::mutable_transformedshare() {
  // @@protoc_insertion_point(field_mutable_list:TransformedShareMsg.transformedShare)
  return &_impl_.transformedshare_;
}
inline const ::TransformedShare& TransformedShareMsg::_internal_transformedshare(int index) const {
  return _impl_.transformedshare_.Get(index);
}
inline const ::TransformedShare& TransformedShareMsg::transformedshare(int index) const {
  // @@protoc_insertion_point(field_get:TransformedShareMsg.transformedShare)
  return _internal_transformedshare(index);
}
inline ::TransformedShare* TransformedShareMsg::_internal_add_transformedshare() {
  return _impl_.transformedshare_.Add();
}
inline ::TransformedShare* TransformedShareMsg::add_transformedshare() {
  ::TransformedShare* _add = _internal_add_transformedshare();
  // @@protoc_insertion_point(field_add:TransformedShareMsg.transformedShare)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransformedShare >&
TransformedShareMsg::transformedshare() const {
  // @@protoc_insertion_point(field_list:TransformedShareMsg.transformedShare)
  return _impl_.transformedshare_;
}

// -------------------------------------------------------------------

// BroadcastTransformShareMsg

// repeated .BroadcastTransformShare broadcast = 1;
inline int BroadcastTransformShareMsg::_internal_broadcast_size() const {
  return _impl_.broadcast_.size();
}
inline int BroadcastTransformShareMsg::broadcast_size() const {
  return _internal_broadcast_size();
}
inline void BroadcastTransformShareMsg::clear_broadcast() {
  _impl_.broadcast_.Clear();
}
inline ::BroadcastTransformShare* BroadcastTransformShareMsg::mutable_broadcast(int index) {
  // @@protoc_insertion_point(field_mutable:BroadcastTransformShareMsg.broadcast)
  return _impl_.broadcast_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BroadcastTransformShare >*
BroadcastTransformShareMsg::mutable_broadcast() {
  // @@protoc_insertion_point(field_mutable_list:BroadcastTransformShareMsg.broadcast)
  return &_impl_.broadcast_;
}
inline const ::BroadcastTransformShare& BroadcastTransformShareMsg::_internal_broadcast(int index) const {
  return _impl_.broadcast_.Get(index);
}
inline const ::BroadcastTransformShare& BroadcastTransformShareMsg::broadcast(int index) const {
  // @@protoc_insertion_point(field_get:BroadcastTransformShareMsg.broadcast)
  return _internal_broadcast(index);
}
inline ::BroadcastTransformShare* BroadcastTransformShareMsg::_internal_add_broadcast() {
  return _impl_.broadcast_.Add();
}
inline ::BroadcastTransformShare* BroadcastTransformShareMsg::add_broadcast() {
  ::BroadcastTransformShare* _add = _internal_add_broadcast();
  // @@protoc_insertion_point(field_add:BroadcastTransformShareMsg.broadcast)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BroadcastTransformShare >&
BroadcastTransformShareMsg::broadcast() const {
  // @@protoc_insertion_point(field_list:BroadcastTransformShareMsg.broadcast)
  return _impl_.broadcast_;
}

// int32 coeff = 2;
inline void BroadcastTransformShareMsg::clear_coeff() {
  _impl_.coeff_ = 0;
}
inline int32_t BroadcastTransformShareMsg::_internal_coeff() const {
  return _impl_.coeff_;
}
inline int32_t BroadcastTransformShareMsg::coeff() const {
  // @@protoc_insertion_point(field_get:BroadcastTransformShareMsg.coeff)
  return _internal_coeff();
}
inline void BroadcastTransformShareMsg::_internal_set_coeff(int32_t value) {
  
  _impl_.coeff_ = value;
}
inline void BroadcastTransformShareMsg::set_coeff(int32_t value) {
  _internal_set_coeff(value);
  // @@protoc_insertion_point(field_set:BroadcastTransformShareMsg.coeff)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ptp_5fand_5fbrdcst_5fmsg_2eproto
