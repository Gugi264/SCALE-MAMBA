// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: randVal_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_randVal_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_randVal_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_randVal_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_randVal_5fmsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_randVal_5fmsg_2eproto;
class BroadcastTransformShareRndVal;
struct BroadcastTransformShareRndValDefaultTypeInternal;
extern BroadcastTransformShareRndValDefaultTypeInternal _BroadcastTransformShareRndVal_default_instance_;
class BroadcastTransformShareRndValMsg;
struct BroadcastTransformShareRndValMsgDefaultTypeInternal;
extern BroadcastTransformShareRndValMsgDefaultTypeInternal _BroadcastTransformShareRndValMsg_default_instance_;
class TransformedShareMsgRndVal;
struct TransformedShareMsgRndValDefaultTypeInternal;
extern TransformedShareMsgRndValDefaultTypeInternal _TransformedShareMsgRndVal_default_instance_;
class TransformedShareRndVal;
struct TransformedShareRndValDefaultTypeInternal;
extern TransformedShareRndValDefaultTypeInternal _TransformedShareRndVal_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BroadcastTransformShareRndVal* Arena::CreateMaybeMessage<::BroadcastTransformShareRndVal>(Arena*);
template<> ::BroadcastTransformShareRndValMsg* Arena::CreateMaybeMessage<::BroadcastTransformShareRndValMsg>(Arena*);
template<> ::TransformedShareMsgRndVal* Arena::CreateMaybeMessage<::TransformedShareMsgRndVal>(Arena*);
template<> ::TransformedShareRndVal* Arena::CreateMaybeMessage<::TransformedShareRndVal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class BroadcastTransformShareRndVal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BroadcastTransformShareRndVal) */ {
 public:
  inline BroadcastTransformShareRndVal() : BroadcastTransformShareRndVal(nullptr) {}
  ~BroadcastTransformShareRndVal() override;
  explicit PROTOBUF_CONSTEXPR BroadcastTransformShareRndVal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastTransformShareRndVal(const BroadcastTransformShareRndVal& from);
  BroadcastTransformShareRndVal(BroadcastTransformShareRndVal&& from) noexcept
    : BroadcastTransformShareRndVal() {
    *this = ::std::move(from);
  }

  inline BroadcastTransformShareRndVal& operator=(const BroadcastTransformShareRndVal& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastTransformShareRndVal& operator=(BroadcastTransformShareRndVal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastTransformShareRndVal& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastTransformShareRndVal* internal_default_instance() {
    return reinterpret_cast<const BroadcastTransformShareRndVal*>(
               &_BroadcastTransformShareRndVal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BroadcastTransformShareRndVal& a, BroadcastTransformShareRndVal& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastTransformShareRndVal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastTransformShareRndVal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastTransformShareRndVal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastTransformShareRndVal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadcastTransformShareRndVal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BroadcastTransformShareRndVal& from) {
    BroadcastTransformShareRndVal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastTransformShareRndVal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BroadcastTransformShareRndVal";
  }
  protected:
  explicit BroadcastTransformShareRndVal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRArFieldNumber = 1,
    kAlphaBrFieldNumber = 2,
  };
  // string r_ar = 1;
  void clear_r_ar();
  const std::string& r_ar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_r_ar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_r_ar();
  PROTOBUF_NODISCARD std::string* release_r_ar();
  void set_allocated_r_ar(std::string* r_ar);
  private:
  const std::string& _internal_r_ar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_r_ar(const std::string& value);
  std::string* _internal_mutable_r_ar();
  public:

  // string alpha_br = 2;
  void clear_alpha_br();
  const std::string& alpha_br() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alpha_br(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alpha_br();
  PROTOBUF_NODISCARD std::string* release_alpha_br();
  void set_allocated_alpha_br(std::string* alpha_br);
  private:
  const std::string& _internal_alpha_br() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alpha_br(const std::string& value);
  std::string* _internal_mutable_alpha_br();
  public:

  // @@protoc_insertion_point(class_scope:BroadcastTransformShareRndVal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_ar_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alpha_br_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_randVal_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class TransformedShareRndVal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransformedShareRndVal) */ {
 public:
  inline TransformedShareRndVal() : TransformedShareRndVal(nullptr) {}
  ~TransformedShareRndVal() override;
  explicit PROTOBUF_CONSTEXPR TransformedShareRndVal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformedShareRndVal(const TransformedShareRndVal& from);
  TransformedShareRndVal(TransformedShareRndVal&& from) noexcept
    : TransformedShareRndVal() {
    *this = ::std::move(from);
  }

  inline TransformedShareRndVal& operator=(const TransformedShareRndVal& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformedShareRndVal& operator=(TransformedShareRndVal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformedShareRndVal& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformedShareRndVal* internal_default_instance() {
    return reinterpret_cast<const TransformedShareRndVal*>(
               &_TransformedShareRndVal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransformedShareRndVal& a, TransformedShareRndVal& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformedShareRndVal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformedShareRndVal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformedShareRndVal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformedShareRndVal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformedShareRndVal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformedShareRndVal& from) {
    TransformedShareRndVal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformedShareRndVal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransformedShareRndVal";
  }
  protected:
  explicit TransformedShareRndVal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShareRFieldNumber = 1,
    kAssociatedCRFieldNumber = 2,
    kLsssShareRFieldNumber = 3,
  };
  // string share_r = 1;
  void clear_share_r();
  const std::string& share_r() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_share_r(ArgT0&& arg0, ArgT... args);
  std::string* mutable_share_r();
  PROTOBUF_NODISCARD std::string* release_share_r();
  void set_allocated_share_r(std::string* share_r);
  private:
  const std::string& _internal_share_r() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_share_r(const std::string& value);
  std::string* _internal_mutable_share_r();
  public:

  // string associated_c_r = 2;
  void clear_associated_c_r();
  const std::string& associated_c_r() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_associated_c_r(ArgT0&& arg0, ArgT... args);
  std::string* mutable_associated_c_r();
  PROTOBUF_NODISCARD std::string* release_associated_c_r();
  void set_allocated_associated_c_r(std::string* associated_c_r);
  private:
  const std::string& _internal_associated_c_r() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_associated_c_r(const std::string& value);
  std::string* _internal_mutable_associated_c_r();
  public:

  // optional string lsss_share_r = 3;
  bool has_lsss_share_r() const;
  private:
  bool _internal_has_lsss_share_r() const;
  public:
  void clear_lsss_share_r();
  const std::string& lsss_share_r() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lsss_share_r(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lsss_share_r();
  PROTOBUF_NODISCARD std::string* release_lsss_share_r();
  void set_allocated_lsss_share_r(std::string* lsss_share_r);
  private:
  const std::string& _internal_lsss_share_r() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lsss_share_r(const std::string& value);
  std::string* _internal_mutable_lsss_share_r();
  public:

  // @@protoc_insertion_point(class_scope:TransformedShareRndVal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr share_r_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associated_c_r_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lsss_share_r_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_randVal_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class TransformedShareMsgRndVal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransformedShareMsgRndVal) */ {
 public:
  inline TransformedShareMsgRndVal() : TransformedShareMsgRndVal(nullptr) {}
  ~TransformedShareMsgRndVal() override;
  explicit PROTOBUF_CONSTEXPR TransformedShareMsgRndVal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformedShareMsgRndVal(const TransformedShareMsgRndVal& from);
  TransformedShareMsgRndVal(TransformedShareMsgRndVal&& from) noexcept
    : TransformedShareMsgRndVal() {
    *this = ::std::move(from);
  }

  inline TransformedShareMsgRndVal& operator=(const TransformedShareMsgRndVal& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformedShareMsgRndVal& operator=(TransformedShareMsgRndVal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformedShareMsgRndVal& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformedShareMsgRndVal* internal_default_instance() {
    return reinterpret_cast<const TransformedShareMsgRndVal*>(
               &_TransformedShareMsgRndVal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransformedShareMsgRndVal& a, TransformedShareMsgRndVal& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformedShareMsgRndVal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformedShareMsgRndVal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformedShareMsgRndVal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformedShareMsgRndVal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformedShareMsgRndVal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformedShareMsgRndVal& from) {
    TransformedShareMsgRndVal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformedShareMsgRndVal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransformedShareMsgRndVal";
  }
  protected:
  explicit TransformedShareMsgRndVal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformedShareFieldNumber = 2,
    kCoeffFieldNumber = 1,
  };
  // repeated .TransformedShareRndVal transformedShare = 2;
  int transformedshare_size() const;
  private:
  int _internal_transformedshare_size() const;
  public:
  void clear_transformedshare();
  ::TransformedShareRndVal* mutable_transformedshare(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransformedShareRndVal >*
      mutable_transformedshare();
  private:
  const ::TransformedShareRndVal& _internal_transformedshare(int index) const;
  ::TransformedShareRndVal* _internal_add_transformedshare();
  public:
  const ::TransformedShareRndVal& transformedshare(int index) const;
  ::TransformedShareRndVal* add_transformedshare();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransformedShareRndVal >&
      transformedshare() const;

  // int32 coeff = 1;
  void clear_coeff();
  int32_t coeff() const;
  void set_coeff(int32_t value);
  private:
  int32_t _internal_coeff() const;
  void _internal_set_coeff(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TransformedShareMsgRndVal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransformedShareRndVal > transformedshare_;
    int32_t coeff_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_randVal_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class BroadcastTransformShareRndValMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BroadcastTransformShareRndValMsg) */ {
 public:
  inline BroadcastTransformShareRndValMsg() : BroadcastTransformShareRndValMsg(nullptr) {}
  ~BroadcastTransformShareRndValMsg() override;
  explicit PROTOBUF_CONSTEXPR BroadcastTransformShareRndValMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastTransformShareRndValMsg(const BroadcastTransformShareRndValMsg& from);
  BroadcastTransformShareRndValMsg(BroadcastTransformShareRndValMsg&& from) noexcept
    : BroadcastTransformShareRndValMsg() {
    *this = ::std::move(from);
  }

  inline BroadcastTransformShareRndValMsg& operator=(const BroadcastTransformShareRndValMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastTransformShareRndValMsg& operator=(BroadcastTransformShareRndValMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastTransformShareRndValMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastTransformShareRndValMsg* internal_default_instance() {
    return reinterpret_cast<const BroadcastTransformShareRndValMsg*>(
               &_BroadcastTransformShareRndValMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BroadcastTransformShareRndValMsg& a, BroadcastTransformShareRndValMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastTransformShareRndValMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastTransformShareRndValMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastTransformShareRndValMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastTransformShareRndValMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadcastTransformShareRndValMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BroadcastTransformShareRndValMsg& from) {
    BroadcastTransformShareRndValMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastTransformShareRndValMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BroadcastTransformShareRndValMsg";
  }
  protected:
  explicit BroadcastTransformShareRndValMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadcastFieldNumber = 1,
    kCoeffFieldNumber = 2,
  };
  // repeated .BroadcastTransformShareRndVal broadcast = 1;
  int broadcast_size() const;
  private:
  int _internal_broadcast_size() const;
  public:
  void clear_broadcast();
  ::BroadcastTransformShareRndVal* mutable_broadcast(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BroadcastTransformShareRndVal >*
      mutable_broadcast();
  private:
  const ::BroadcastTransformShareRndVal& _internal_broadcast(int index) const;
  ::BroadcastTransformShareRndVal* _internal_add_broadcast();
  public:
  const ::BroadcastTransformShareRndVal& broadcast(int index) const;
  ::BroadcastTransformShareRndVal* add_broadcast();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BroadcastTransformShareRndVal >&
      broadcast() const;

  // int32 coeff = 2;
  void clear_coeff();
  int32_t coeff() const;
  void set_coeff(int32_t value);
  private:
  int32_t _internal_coeff() const;
  void _internal_set_coeff(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:BroadcastTransformShareRndValMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BroadcastTransformShareRndVal > broadcast_;
    int32_t coeff_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_randVal_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BroadcastTransformShareRndVal

// string r_ar = 1;
inline void BroadcastTransformShareRndVal::clear_r_ar() {
  _impl_.r_ar_.ClearToEmpty();
}
inline const std::string& BroadcastTransformShareRndVal::r_ar() const {
  // @@protoc_insertion_point(field_get:BroadcastTransformShareRndVal.r_ar)
  return _internal_r_ar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastTransformShareRndVal::set_r_ar(ArgT0&& arg0, ArgT... args) {
 
 _impl_.r_ar_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BroadcastTransformShareRndVal.r_ar)
}
inline std::string* BroadcastTransformShareRndVal::mutable_r_ar() {
  std::string* _s = _internal_mutable_r_ar();
  // @@protoc_insertion_point(field_mutable:BroadcastTransformShareRndVal.r_ar)
  return _s;
}
inline const std::string& BroadcastTransformShareRndVal::_internal_r_ar() const {
  return _impl_.r_ar_.Get();
}
inline void BroadcastTransformShareRndVal::_internal_set_r_ar(const std::string& value) {
  
  _impl_.r_ar_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastTransformShareRndVal::_internal_mutable_r_ar() {
  
  return _impl_.r_ar_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadcastTransformShareRndVal::release_r_ar() {
  // @@protoc_insertion_point(field_release:BroadcastTransformShareRndVal.r_ar)
  return _impl_.r_ar_.Release();
}
inline void BroadcastTransformShareRndVal::set_allocated_r_ar(std::string* r_ar) {
  if (r_ar != nullptr) {
    
  } else {
    
  }
  _impl_.r_ar_.SetAllocated(r_ar, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.r_ar_.IsDefault()) {
    _impl_.r_ar_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BroadcastTransformShareRndVal.r_ar)
}

// string alpha_br = 2;
inline void BroadcastTransformShareRndVal::clear_alpha_br() {
  _impl_.alpha_br_.ClearToEmpty();
}
inline const std::string& BroadcastTransformShareRndVal::alpha_br() const {
  // @@protoc_insertion_point(field_get:BroadcastTransformShareRndVal.alpha_br)
  return _internal_alpha_br();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastTransformShareRndVal::set_alpha_br(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alpha_br_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BroadcastTransformShareRndVal.alpha_br)
}
inline std::string* BroadcastTransformShareRndVal::mutable_alpha_br() {
  std::string* _s = _internal_mutable_alpha_br();
  // @@protoc_insertion_point(field_mutable:BroadcastTransformShareRndVal.alpha_br)
  return _s;
}
inline const std::string& BroadcastTransformShareRndVal::_internal_alpha_br() const {
  return _impl_.alpha_br_.Get();
}
inline void BroadcastTransformShareRndVal::_internal_set_alpha_br(const std::string& value) {
  
  _impl_.alpha_br_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastTransformShareRndVal::_internal_mutable_alpha_br() {
  
  return _impl_.alpha_br_.Mutable(GetArenaForAllocation());
}
inline std::string* BroadcastTransformShareRndVal::release_alpha_br() {
  // @@protoc_insertion_point(field_release:BroadcastTransformShareRndVal.alpha_br)
  return _impl_.alpha_br_.Release();
}
inline void BroadcastTransformShareRndVal::set_allocated_alpha_br(std::string* alpha_br) {
  if (alpha_br != nullptr) {
    
  } else {
    
  }
  _impl_.alpha_br_.SetAllocated(alpha_br, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alpha_br_.IsDefault()) {
    _impl_.alpha_br_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BroadcastTransformShareRndVal.alpha_br)
}

// -------------------------------------------------------------------

// TransformedShareRndVal

// string share_r = 1;
inline void TransformedShareRndVal::clear_share_r() {
  _impl_.share_r_.ClearToEmpty();
}
inline const std::string& TransformedShareRndVal::share_r() const {
  // @@protoc_insertion_point(field_get:TransformedShareRndVal.share_r)
  return _internal_share_r();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformedShareRndVal::set_share_r(ArgT0&& arg0, ArgT... args) {
 
 _impl_.share_r_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TransformedShareRndVal.share_r)
}
inline std::string* TransformedShareRndVal::mutable_share_r() {
  std::string* _s = _internal_mutable_share_r();
  // @@protoc_insertion_point(field_mutable:TransformedShareRndVal.share_r)
  return _s;
}
inline const std::string& TransformedShareRndVal::_internal_share_r() const {
  return _impl_.share_r_.Get();
}
inline void TransformedShareRndVal::_internal_set_share_r(const std::string& value) {
  
  _impl_.share_r_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformedShareRndVal::_internal_mutable_share_r() {
  
  return _impl_.share_r_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformedShareRndVal::release_share_r() {
  // @@protoc_insertion_point(field_release:TransformedShareRndVal.share_r)
  return _impl_.share_r_.Release();
}
inline void TransformedShareRndVal::set_allocated_share_r(std::string* share_r) {
  if (share_r != nullptr) {
    
  } else {
    
  }
  _impl_.share_r_.SetAllocated(share_r, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.share_r_.IsDefault()) {
    _impl_.share_r_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TransformedShareRndVal.share_r)
}

// string associated_c_r = 2;
inline void TransformedShareRndVal::clear_associated_c_r() {
  _impl_.associated_c_r_.ClearToEmpty();
}
inline const std::string& TransformedShareRndVal::associated_c_r() const {
  // @@protoc_insertion_point(field_get:TransformedShareRndVal.associated_c_r)
  return _internal_associated_c_r();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformedShareRndVal::set_associated_c_r(ArgT0&& arg0, ArgT... args) {
 
 _impl_.associated_c_r_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TransformedShareRndVal.associated_c_r)
}
inline std::string* TransformedShareRndVal::mutable_associated_c_r() {
  std::string* _s = _internal_mutable_associated_c_r();
  // @@protoc_insertion_point(field_mutable:TransformedShareRndVal.associated_c_r)
  return _s;
}
inline const std::string& TransformedShareRndVal::_internal_associated_c_r() const {
  return _impl_.associated_c_r_.Get();
}
inline void TransformedShareRndVal::_internal_set_associated_c_r(const std::string& value) {
  
  _impl_.associated_c_r_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformedShareRndVal::_internal_mutable_associated_c_r() {
  
  return _impl_.associated_c_r_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformedShareRndVal::release_associated_c_r() {
  // @@protoc_insertion_point(field_release:TransformedShareRndVal.associated_c_r)
  return _impl_.associated_c_r_.Release();
}
inline void TransformedShareRndVal::set_allocated_associated_c_r(std::string* associated_c_r) {
  if (associated_c_r != nullptr) {
    
  } else {
    
  }
  _impl_.associated_c_r_.SetAllocated(associated_c_r, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.associated_c_r_.IsDefault()) {
    _impl_.associated_c_r_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TransformedShareRndVal.associated_c_r)
}

// optional string lsss_share_r = 3;
inline bool TransformedShareRndVal::_internal_has_lsss_share_r() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransformedShareRndVal::has_lsss_share_r() const {
  return _internal_has_lsss_share_r();
}
inline void TransformedShareRndVal::clear_lsss_share_r() {
  _impl_.lsss_share_r_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransformedShareRndVal::lsss_share_r() const {
  // @@protoc_insertion_point(field_get:TransformedShareRndVal.lsss_share_r)
  return _internal_lsss_share_r();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformedShareRndVal::set_lsss_share_r(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.lsss_share_r_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TransformedShareRndVal.lsss_share_r)
}
inline std::string* TransformedShareRndVal::mutable_lsss_share_r() {
  std::string* _s = _internal_mutable_lsss_share_r();
  // @@protoc_insertion_point(field_mutable:TransformedShareRndVal.lsss_share_r)
  return _s;
}
inline const std::string& TransformedShareRndVal::_internal_lsss_share_r() const {
  return _impl_.lsss_share_r_.Get();
}
inline void TransformedShareRndVal::_internal_set_lsss_share_r(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lsss_share_r_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformedShareRndVal::_internal_mutable_lsss_share_r() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.lsss_share_r_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformedShareRndVal::release_lsss_share_r() {
  // @@protoc_insertion_point(field_release:TransformedShareRndVal.lsss_share_r)
  if (!_internal_has_lsss_share_r()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.lsss_share_r_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lsss_share_r_.IsDefault()) {
    _impl_.lsss_share_r_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TransformedShareRndVal::set_allocated_lsss_share_r(std::string* lsss_share_r) {
  if (lsss_share_r != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lsss_share_r_.SetAllocated(lsss_share_r, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lsss_share_r_.IsDefault()) {
    _impl_.lsss_share_r_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TransformedShareRndVal.lsss_share_r)
}

// -------------------------------------------------------------------

// TransformedShareMsgRndVal

// int32 coeff = 1;
inline void TransformedShareMsgRndVal::clear_coeff() {
  _impl_.coeff_ = 0;
}
inline int32_t TransformedShareMsgRndVal::_internal_coeff() const {
  return _impl_.coeff_;
}
inline int32_t TransformedShareMsgRndVal::coeff() const {
  // @@protoc_insertion_point(field_get:TransformedShareMsgRndVal.coeff)
  return _internal_coeff();
}
inline void TransformedShareMsgRndVal::_internal_set_coeff(int32_t value) {
  
  _impl_.coeff_ = value;
}
inline void TransformedShareMsgRndVal::set_coeff(int32_t value) {
  _internal_set_coeff(value);
  // @@protoc_insertion_point(field_set:TransformedShareMsgRndVal.coeff)
}

// repeated .TransformedShareRndVal transformedShare = 2;
inline int TransformedShareMsgRndVal::_internal_transformedshare_size() const {
  return _impl_.transformedshare_.size();
}
inline int TransformedShareMsgRndVal::transformedshare_size() const {
  return _internal_transformedshare_size();
}
inline void TransformedShareMsgRndVal::clear_transformedshare() {
  _impl_.transformedshare_.Clear();
}
inline ::TransformedShareRndVal* TransformedShareMsgRndVal::mutable_transformedshare(int index) {
  // @@protoc_insertion_point(field_mutable:TransformedShareMsgRndVal.transformedShare)
  return _impl_.transformedshare_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransformedShareRndVal >*
TransformedShareMsgRndVal::mutable_transformedshare() {
  // @@protoc_insertion_point(field_mutable_list:TransformedShareMsgRndVal.transformedShare)
  return &_impl_.transformedshare_;
}
inline const ::TransformedShareRndVal& TransformedShareMsgRndVal::_internal_transformedshare(int index) const {
  return _impl_.transformedshare_.Get(index);
}
inline const ::TransformedShareRndVal& TransformedShareMsgRndVal::transformedshare(int index) const {
  // @@protoc_insertion_point(field_get:TransformedShareMsgRndVal.transformedShare)
  return _internal_transformedshare(index);
}
inline ::TransformedShareRndVal* TransformedShareMsgRndVal::_internal_add_transformedshare() {
  return _impl_.transformedshare_.Add();
}
inline ::TransformedShareRndVal* TransformedShareMsgRndVal::add_transformedshare() {
  ::TransformedShareRndVal* _add = _internal_add_transformedshare();
  // @@protoc_insertion_point(field_add:TransformedShareMsgRndVal.transformedShare)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransformedShareRndVal >&
TransformedShareMsgRndVal::transformedshare() const {
  // @@protoc_insertion_point(field_list:TransformedShareMsgRndVal.transformedShare)
  return _impl_.transformedshare_;
}

// -------------------------------------------------------------------

// BroadcastTransformShareRndValMsg

// repeated .BroadcastTransformShareRndVal broadcast = 1;
inline int BroadcastTransformShareRndValMsg::_internal_broadcast_size() const {
  return _impl_.broadcast_.size();
}
inline int BroadcastTransformShareRndValMsg::broadcast_size() const {
  return _internal_broadcast_size();
}
inline void BroadcastTransformShareRndValMsg::clear_broadcast() {
  _impl_.broadcast_.Clear();
}
inline ::BroadcastTransformShareRndVal* BroadcastTransformShareRndValMsg::mutable_broadcast(int index) {
  // @@protoc_insertion_point(field_mutable:BroadcastTransformShareRndValMsg.broadcast)
  return _impl_.broadcast_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BroadcastTransformShareRndVal >*
BroadcastTransformShareRndValMsg::mutable_broadcast() {
  // @@protoc_insertion_point(field_mutable_list:BroadcastTransformShareRndValMsg.broadcast)
  return &_impl_.broadcast_;
}
inline const ::BroadcastTransformShareRndVal& BroadcastTransformShareRndValMsg::_internal_broadcast(int index) const {
  return _impl_.broadcast_.Get(index);
}
inline const ::BroadcastTransformShareRndVal& BroadcastTransformShareRndValMsg::broadcast(int index) const {
  // @@protoc_insertion_point(field_get:BroadcastTransformShareRndValMsg.broadcast)
  return _internal_broadcast(index);
}
inline ::BroadcastTransformShareRndVal* BroadcastTransformShareRndValMsg::_internal_add_broadcast() {
  return _impl_.broadcast_.Add();
}
inline ::BroadcastTransformShareRndVal* BroadcastTransformShareRndValMsg::add_broadcast() {
  ::BroadcastTransformShareRndVal* _add = _internal_add_broadcast();
  // @@protoc_insertion_point(field_add:BroadcastTransformShareRndValMsg.broadcast)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BroadcastTransformShareRndVal >&
BroadcastTransformShareRndValMsg::broadcast() const {
  // @@protoc_insertion_point(field_list:BroadcastTransformShareRndValMsg.broadcast)
  return _impl_.broadcast_;
}

// int32 coeff = 2;
inline void BroadcastTransformShareRndValMsg::clear_coeff() {
  _impl_.coeff_ = 0;
}
inline int32_t BroadcastTransformShareRndValMsg::_internal_coeff() const {
  return _impl_.coeff_;
}
inline int32_t BroadcastTransformShareRndValMsg::coeff() const {
  // @@protoc_insertion_point(field_get:BroadcastTransformShareRndValMsg.coeff)
  return _internal_coeff();
}
inline void BroadcastTransformShareRndValMsg::_internal_set_coeff(int32_t value) {
  
  _impl_.coeff_ = value;
}
inline void BroadcastTransformShareRndValMsg::set_coeff(int32_t value) {
  _internal_set_coeff(value);
  // @@protoc_insertion_point(field_set:BroadcastTransformShareRndValMsg.coeff)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_randVal_5fmsg_2eproto
