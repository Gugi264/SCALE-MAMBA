// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Input_Output_Triples.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Input_5fOutput_5fTriples_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Input_5fOutput_5fTriples_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Input_5fOutput_5fTriples_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Input_5fOutput_5fTriples_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Input_5fOutput_5fTriples_2eproto;
class AssociatedTriple;
struct AssociatedTripleDefaultTypeInternal;
extern AssociatedTripleDefaultTypeInternal _AssociatedTriple_default_instance_;
class TripleShare;
struct TripleShareDefaultTypeInternal;
extern TripleShareDefaultTypeInternal _TripleShare_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AssociatedTriple* Arena::CreateMaybeMessage<::AssociatedTriple>(Arena*);
template<> ::TripleShare* Arena::CreateMaybeMessage<::TripleShare>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AssociatedTriple final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AssociatedTriple) */ {
 public:
  inline AssociatedTriple() : AssociatedTriple(nullptr) {}
  ~AssociatedTriple() override;
  explicit PROTOBUF_CONSTEXPR AssociatedTriple(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssociatedTriple(const AssociatedTriple& from);
  AssociatedTriple(AssociatedTriple&& from) noexcept
    : AssociatedTriple() {
    *this = ::std::move(from);
  }

  inline AssociatedTriple& operator=(const AssociatedTriple& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssociatedTriple& operator=(AssociatedTriple&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssociatedTriple& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssociatedTriple* internal_default_instance() {
    return reinterpret_cast<const AssociatedTriple*>(
               &_AssociatedTriple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AssociatedTriple& a, AssociatedTriple& b) {
    a.Swap(&b);
  }
  inline void Swap(AssociatedTriple* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssociatedTriple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssociatedTriple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssociatedTriple>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssociatedTriple& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AssociatedTriple& from) {
    AssociatedTriple::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssociatedTriple* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AssociatedTriple";
  }
  protected:
  explicit AssociatedTriple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShareAFieldNumber = 1,
    kShareBFieldNumber = 2,
    kShareCFieldNumber = 3,
  };
  // string share_a = 1;
  void clear_share_a();
  const std::string& share_a() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_share_a(ArgT0&& arg0, ArgT... args);
  std::string* mutable_share_a();
  PROTOBUF_NODISCARD std::string* release_share_a();
  void set_allocated_share_a(std::string* share_a);
  private:
  const std::string& _internal_share_a() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_share_a(const std::string& value);
  std::string* _internal_mutable_share_a();
  public:

  // string share_b = 2;
  void clear_share_b();
  const std::string& share_b() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_share_b(ArgT0&& arg0, ArgT... args);
  std::string* mutable_share_b();
  PROTOBUF_NODISCARD std::string* release_share_b();
  void set_allocated_share_b(std::string* share_b);
  private:
  const std::string& _internal_share_b() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_share_b(const std::string& value);
  std::string* _internal_mutable_share_b();
  public:

  // string share_c = 3;
  void clear_share_c();
  const std::string& share_c() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_share_c(ArgT0&& arg0, ArgT... args);
  std::string* mutable_share_c();
  PROTOBUF_NODISCARD std::string* release_share_c();
  void set_allocated_share_c(std::string* share_c);
  private:
  const std::string& _internal_share_c() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_share_c(const std::string& value);
  std::string* _internal_mutable_share_c();
  public:

  // @@protoc_insertion_point(class_scope:AssociatedTriple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr share_a_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr share_b_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr share_c_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Input_5fOutput_5fTriples_2eproto;
};
// -------------------------------------------------------------------

class TripleShare final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TripleShare) */ {
 public:
  inline TripleShare() : TripleShare(nullptr) {}
  ~TripleShare() override;
  explicit PROTOBUF_CONSTEXPR TripleShare(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TripleShare(const TripleShare& from);
  TripleShare(TripleShare&& from) noexcept
    : TripleShare() {
    *this = ::std::move(from);
  }

  inline TripleShare& operator=(const TripleShare& from) {
    CopyFrom(from);
    return *this;
  }
  inline TripleShare& operator=(TripleShare&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TripleShare& default_instance() {
    return *internal_default_instance();
  }
  static inline const TripleShare* internal_default_instance() {
    return reinterpret_cast<const TripleShare*>(
               &_TripleShare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TripleShare& a, TripleShare& b) {
    a.Swap(&b);
  }
  inline void Swap(TripleShare* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripleShare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TripleShare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TripleShare>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TripleShare& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TripleShare& from) {
    TripleShare::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TripleShare* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TripleShare";
  }
  protected:
  explicit TripleShare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssociatedAFieldNumber = 5,
    kAssociatedBFieldNumber = 6,
    kAssociatedCFieldNumber = 7,
    kShareAFieldNumber = 2,
    kShareBFieldNumber = 3,
    kShareCFieldNumber = 4,
    kPlayerNrFieldNumber = 1,
  };
  // .AssociatedTriple associated_a = 5;
  bool has_associated_a() const;
  private:
  bool _internal_has_associated_a() const;
  public:
  void clear_associated_a();
  const ::AssociatedTriple& associated_a() const;
  PROTOBUF_NODISCARD ::AssociatedTriple* release_associated_a();
  ::AssociatedTriple* mutable_associated_a();
  void set_allocated_associated_a(::AssociatedTriple* associated_a);
  private:
  const ::AssociatedTriple& _internal_associated_a() const;
  ::AssociatedTriple* _internal_mutable_associated_a();
  public:
  void unsafe_arena_set_allocated_associated_a(
      ::AssociatedTriple* associated_a);
  ::AssociatedTriple* unsafe_arena_release_associated_a();

  // .AssociatedTriple associated_b = 6;
  bool has_associated_b() const;
  private:
  bool _internal_has_associated_b() const;
  public:
  void clear_associated_b();
  const ::AssociatedTriple& associated_b() const;
  PROTOBUF_NODISCARD ::AssociatedTriple* release_associated_b();
  ::AssociatedTriple* mutable_associated_b();
  void set_allocated_associated_b(::AssociatedTriple* associated_b);
  private:
  const ::AssociatedTriple& _internal_associated_b() const;
  ::AssociatedTriple* _internal_mutable_associated_b();
  public:
  void unsafe_arena_set_allocated_associated_b(
      ::AssociatedTriple* associated_b);
  ::AssociatedTriple* unsafe_arena_release_associated_b();

  // .AssociatedTriple associated_c = 7;
  bool has_associated_c() const;
  private:
  bool _internal_has_associated_c() const;
  public:
  void clear_associated_c();
  const ::AssociatedTriple& associated_c() const;
  PROTOBUF_NODISCARD ::AssociatedTriple* release_associated_c();
  ::AssociatedTriple* mutable_associated_c();
  void set_allocated_associated_c(::AssociatedTriple* associated_c);
  private:
  const ::AssociatedTriple& _internal_associated_c() const;
  ::AssociatedTriple* _internal_mutable_associated_c();
  public:
  void unsafe_arena_set_allocated_associated_c(
      ::AssociatedTriple* associated_c);
  ::AssociatedTriple* unsafe_arena_release_associated_c();

  // int64 share_a = 2;
  void clear_share_a();
  int64_t share_a() const;
  void set_share_a(int64_t value);
  private:
  int64_t _internal_share_a() const;
  void _internal_set_share_a(int64_t value);
  public:

  // int64 share_b = 3;
  void clear_share_b();
  int64_t share_b() const;
  void set_share_b(int64_t value);
  private:
  int64_t _internal_share_b() const;
  void _internal_set_share_b(int64_t value);
  public:

  // int64 share_c = 4;
  void clear_share_c();
  int64_t share_c() const;
  void set_share_c(int64_t value);
  private:
  int64_t _internal_share_c() const;
  void _internal_set_share_c(int64_t value);
  public:

  // int32 player_nr = 1;
  void clear_player_nr();
  int32_t player_nr() const;
  void set_player_nr(int32_t value);
  private:
  int32_t _internal_player_nr() const;
  void _internal_set_player_nr(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TripleShare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::AssociatedTriple* associated_a_;
    ::AssociatedTriple* associated_b_;
    ::AssociatedTriple* associated_c_;
    int64_t share_a_;
    int64_t share_b_;
    int64_t share_c_;
    int32_t player_nr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Input_5fOutput_5fTriples_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AssociatedTriple

// string share_a = 1;
inline void AssociatedTriple::clear_share_a() {
  _impl_.share_a_.ClearToEmpty();
}
inline const std::string& AssociatedTriple::share_a() const {
  // @@protoc_insertion_point(field_get:AssociatedTriple.share_a)
  return _internal_share_a();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssociatedTriple::set_share_a(ArgT0&& arg0, ArgT... args) {
 
 _impl_.share_a_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AssociatedTriple.share_a)
}
inline std::string* AssociatedTriple::mutable_share_a() {
  std::string* _s = _internal_mutable_share_a();
  // @@protoc_insertion_point(field_mutable:AssociatedTriple.share_a)
  return _s;
}
inline const std::string& AssociatedTriple::_internal_share_a() const {
  return _impl_.share_a_.Get();
}
inline void AssociatedTriple::_internal_set_share_a(const std::string& value) {
  
  _impl_.share_a_.Set(value, GetArenaForAllocation());
}
inline std::string* AssociatedTriple::_internal_mutable_share_a() {
  
  return _impl_.share_a_.Mutable(GetArenaForAllocation());
}
inline std::string* AssociatedTriple::release_share_a() {
  // @@protoc_insertion_point(field_release:AssociatedTriple.share_a)
  return _impl_.share_a_.Release();
}
inline void AssociatedTriple::set_allocated_share_a(std::string* share_a) {
  if (share_a != nullptr) {
    
  } else {
    
  }
  _impl_.share_a_.SetAllocated(share_a, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.share_a_.IsDefault()) {
    _impl_.share_a_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AssociatedTriple.share_a)
}

// string share_b = 2;
inline void AssociatedTriple::clear_share_b() {
  _impl_.share_b_.ClearToEmpty();
}
inline const std::string& AssociatedTriple::share_b() const {
  // @@protoc_insertion_point(field_get:AssociatedTriple.share_b)
  return _internal_share_b();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssociatedTriple::set_share_b(ArgT0&& arg0, ArgT... args) {
 
 _impl_.share_b_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AssociatedTriple.share_b)
}
inline std::string* AssociatedTriple::mutable_share_b() {
  std::string* _s = _internal_mutable_share_b();
  // @@protoc_insertion_point(field_mutable:AssociatedTriple.share_b)
  return _s;
}
inline const std::string& AssociatedTriple::_internal_share_b() const {
  return _impl_.share_b_.Get();
}
inline void AssociatedTriple::_internal_set_share_b(const std::string& value) {
  
  _impl_.share_b_.Set(value, GetArenaForAllocation());
}
inline std::string* AssociatedTriple::_internal_mutable_share_b() {
  
  return _impl_.share_b_.Mutable(GetArenaForAllocation());
}
inline std::string* AssociatedTriple::release_share_b() {
  // @@protoc_insertion_point(field_release:AssociatedTriple.share_b)
  return _impl_.share_b_.Release();
}
inline void AssociatedTriple::set_allocated_share_b(std::string* share_b) {
  if (share_b != nullptr) {
    
  } else {
    
  }
  _impl_.share_b_.SetAllocated(share_b, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.share_b_.IsDefault()) {
    _impl_.share_b_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AssociatedTriple.share_b)
}

// string share_c = 3;
inline void AssociatedTriple::clear_share_c() {
  _impl_.share_c_.ClearToEmpty();
}
inline const std::string& AssociatedTriple::share_c() const {
  // @@protoc_insertion_point(field_get:AssociatedTriple.share_c)
  return _internal_share_c();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AssociatedTriple::set_share_c(ArgT0&& arg0, ArgT... args) {
 
 _impl_.share_c_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AssociatedTriple.share_c)
}
inline std::string* AssociatedTriple::mutable_share_c() {
  std::string* _s = _internal_mutable_share_c();
  // @@protoc_insertion_point(field_mutable:AssociatedTriple.share_c)
  return _s;
}
inline const std::string& AssociatedTriple::_internal_share_c() const {
  return _impl_.share_c_.Get();
}
inline void AssociatedTriple::_internal_set_share_c(const std::string& value) {
  
  _impl_.share_c_.Set(value, GetArenaForAllocation());
}
inline std::string* AssociatedTriple::_internal_mutable_share_c() {
  
  return _impl_.share_c_.Mutable(GetArenaForAllocation());
}
inline std::string* AssociatedTriple::release_share_c() {
  // @@protoc_insertion_point(field_release:AssociatedTriple.share_c)
  return _impl_.share_c_.Release();
}
inline void AssociatedTriple::set_allocated_share_c(std::string* share_c) {
  if (share_c != nullptr) {
    
  } else {
    
  }
  _impl_.share_c_.SetAllocated(share_c, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.share_c_.IsDefault()) {
    _impl_.share_c_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AssociatedTriple.share_c)
}

// -------------------------------------------------------------------

// TripleShare

// int32 player_nr = 1;
inline void TripleShare::clear_player_nr() {
  _impl_.player_nr_ = 0;
}
inline int32_t TripleShare::_internal_player_nr() const {
  return _impl_.player_nr_;
}
inline int32_t TripleShare::player_nr() const {
  // @@protoc_insertion_point(field_get:TripleShare.player_nr)
  return _internal_player_nr();
}
inline void TripleShare::_internal_set_player_nr(int32_t value) {
  
  _impl_.player_nr_ = value;
}
inline void TripleShare::set_player_nr(int32_t value) {
  _internal_set_player_nr(value);
  // @@protoc_insertion_point(field_set:TripleShare.player_nr)
}

// int64 share_a = 2;
inline void TripleShare::clear_share_a() {
  _impl_.share_a_ = int64_t{0};
}
inline int64_t TripleShare::_internal_share_a() const {
  return _impl_.share_a_;
}
inline int64_t TripleShare::share_a() const {
  // @@protoc_insertion_point(field_get:TripleShare.share_a)
  return _internal_share_a();
}
inline void TripleShare::_internal_set_share_a(int64_t value) {
  
  _impl_.share_a_ = value;
}
inline void TripleShare::set_share_a(int64_t value) {
  _internal_set_share_a(value);
  // @@protoc_insertion_point(field_set:TripleShare.share_a)
}

// int64 share_b = 3;
inline void TripleShare::clear_share_b() {
  _impl_.share_b_ = int64_t{0};
}
inline int64_t TripleShare::_internal_share_b() const {
  return _impl_.share_b_;
}
inline int64_t TripleShare::share_b() const {
  // @@protoc_insertion_point(field_get:TripleShare.share_b)
  return _internal_share_b();
}
inline void TripleShare::_internal_set_share_b(int64_t value) {
  
  _impl_.share_b_ = value;
}
inline void TripleShare::set_share_b(int64_t value) {
  _internal_set_share_b(value);
  // @@protoc_insertion_point(field_set:TripleShare.share_b)
}

// int64 share_c = 4;
inline void TripleShare::clear_share_c() {
  _impl_.share_c_ = int64_t{0};
}
inline int64_t TripleShare::_internal_share_c() const {
  return _impl_.share_c_;
}
inline int64_t TripleShare::share_c() const {
  // @@protoc_insertion_point(field_get:TripleShare.share_c)
  return _internal_share_c();
}
inline void TripleShare::_internal_set_share_c(int64_t value) {
  
  _impl_.share_c_ = value;
}
inline void TripleShare::set_share_c(int64_t value) {
  _internal_set_share_c(value);
  // @@protoc_insertion_point(field_set:TripleShare.share_c)
}

// .AssociatedTriple associated_a = 5;
inline bool TripleShare::_internal_has_associated_a() const {
  return this != internal_default_instance() && _impl_.associated_a_ != nullptr;
}
inline bool TripleShare::has_associated_a() const {
  return _internal_has_associated_a();
}
inline void TripleShare::clear_associated_a() {
  if (GetArenaForAllocation() == nullptr && _impl_.associated_a_ != nullptr) {
    delete _impl_.associated_a_;
  }
  _impl_.associated_a_ = nullptr;
}
inline const ::AssociatedTriple& TripleShare::_internal_associated_a() const {
  const ::AssociatedTriple* p = _impl_.associated_a_;
  return p != nullptr ? *p : reinterpret_cast<const ::AssociatedTriple&>(
      ::_AssociatedTriple_default_instance_);
}
inline const ::AssociatedTriple& TripleShare::associated_a() const {
  // @@protoc_insertion_point(field_get:TripleShare.associated_a)
  return _internal_associated_a();
}
inline void TripleShare::unsafe_arena_set_allocated_associated_a(
    ::AssociatedTriple* associated_a) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.associated_a_);
  }
  _impl_.associated_a_ = associated_a;
  if (associated_a) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TripleShare.associated_a)
}
inline ::AssociatedTriple* TripleShare::release_associated_a() {
  
  ::AssociatedTriple* temp = _impl_.associated_a_;
  _impl_.associated_a_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AssociatedTriple* TripleShare::unsafe_arena_release_associated_a() {
  // @@protoc_insertion_point(field_release:TripleShare.associated_a)
  
  ::AssociatedTriple* temp = _impl_.associated_a_;
  _impl_.associated_a_ = nullptr;
  return temp;
}
inline ::AssociatedTriple* TripleShare::_internal_mutable_associated_a() {
  
  if (_impl_.associated_a_ == nullptr) {
    auto* p = CreateMaybeMessage<::AssociatedTriple>(GetArenaForAllocation());
    _impl_.associated_a_ = p;
  }
  return _impl_.associated_a_;
}
inline ::AssociatedTriple* TripleShare::mutable_associated_a() {
  ::AssociatedTriple* _msg = _internal_mutable_associated_a();
  // @@protoc_insertion_point(field_mutable:TripleShare.associated_a)
  return _msg;
}
inline void TripleShare::set_allocated_associated_a(::AssociatedTriple* associated_a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.associated_a_;
  }
  if (associated_a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(associated_a);
    if (message_arena != submessage_arena) {
      associated_a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, associated_a, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.associated_a_ = associated_a;
  // @@protoc_insertion_point(field_set_allocated:TripleShare.associated_a)
}

// .AssociatedTriple associated_b = 6;
inline bool TripleShare::_internal_has_associated_b() const {
  return this != internal_default_instance() && _impl_.associated_b_ != nullptr;
}
inline bool TripleShare::has_associated_b() const {
  return _internal_has_associated_b();
}
inline void TripleShare::clear_associated_b() {
  if (GetArenaForAllocation() == nullptr && _impl_.associated_b_ != nullptr) {
    delete _impl_.associated_b_;
  }
  _impl_.associated_b_ = nullptr;
}
inline const ::AssociatedTriple& TripleShare::_internal_associated_b() const {
  const ::AssociatedTriple* p = _impl_.associated_b_;
  return p != nullptr ? *p : reinterpret_cast<const ::AssociatedTriple&>(
      ::_AssociatedTriple_default_instance_);
}
inline const ::AssociatedTriple& TripleShare::associated_b() const {
  // @@protoc_insertion_point(field_get:TripleShare.associated_b)
  return _internal_associated_b();
}
inline void TripleShare::unsafe_arena_set_allocated_associated_b(
    ::AssociatedTriple* associated_b) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.associated_b_);
  }
  _impl_.associated_b_ = associated_b;
  if (associated_b) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TripleShare.associated_b)
}
inline ::AssociatedTriple* TripleShare::release_associated_b() {
  
  ::AssociatedTriple* temp = _impl_.associated_b_;
  _impl_.associated_b_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AssociatedTriple* TripleShare::unsafe_arena_release_associated_b() {
  // @@protoc_insertion_point(field_release:TripleShare.associated_b)
  
  ::AssociatedTriple* temp = _impl_.associated_b_;
  _impl_.associated_b_ = nullptr;
  return temp;
}
inline ::AssociatedTriple* TripleShare::_internal_mutable_associated_b() {
  
  if (_impl_.associated_b_ == nullptr) {
    auto* p = CreateMaybeMessage<::AssociatedTriple>(GetArenaForAllocation());
    _impl_.associated_b_ = p;
  }
  return _impl_.associated_b_;
}
inline ::AssociatedTriple* TripleShare::mutable_associated_b() {
  ::AssociatedTriple* _msg = _internal_mutable_associated_b();
  // @@protoc_insertion_point(field_mutable:TripleShare.associated_b)
  return _msg;
}
inline void TripleShare::set_allocated_associated_b(::AssociatedTriple* associated_b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.associated_b_;
  }
  if (associated_b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(associated_b);
    if (message_arena != submessage_arena) {
      associated_b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, associated_b, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.associated_b_ = associated_b;
  // @@protoc_insertion_point(field_set_allocated:TripleShare.associated_b)
}

// .AssociatedTriple associated_c = 7;
inline bool TripleShare::_internal_has_associated_c() const {
  return this != internal_default_instance() && _impl_.associated_c_ != nullptr;
}
inline bool TripleShare::has_associated_c() const {
  return _internal_has_associated_c();
}
inline void TripleShare::clear_associated_c() {
  if (GetArenaForAllocation() == nullptr && _impl_.associated_c_ != nullptr) {
    delete _impl_.associated_c_;
  }
  _impl_.associated_c_ = nullptr;
}
inline const ::AssociatedTriple& TripleShare::_internal_associated_c() const {
  const ::AssociatedTriple* p = _impl_.associated_c_;
  return p != nullptr ? *p : reinterpret_cast<const ::AssociatedTriple&>(
      ::_AssociatedTriple_default_instance_);
}
inline const ::AssociatedTriple& TripleShare::associated_c() const {
  // @@protoc_insertion_point(field_get:TripleShare.associated_c)
  return _internal_associated_c();
}
inline void TripleShare::unsafe_arena_set_allocated_associated_c(
    ::AssociatedTriple* associated_c) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.associated_c_);
  }
  _impl_.associated_c_ = associated_c;
  if (associated_c) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TripleShare.associated_c)
}
inline ::AssociatedTriple* TripleShare::release_associated_c() {
  
  ::AssociatedTriple* temp = _impl_.associated_c_;
  _impl_.associated_c_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AssociatedTriple* TripleShare::unsafe_arena_release_associated_c() {
  // @@protoc_insertion_point(field_release:TripleShare.associated_c)
  
  ::AssociatedTriple* temp = _impl_.associated_c_;
  _impl_.associated_c_ = nullptr;
  return temp;
}
inline ::AssociatedTriple* TripleShare::_internal_mutable_associated_c() {
  
  if (_impl_.associated_c_ == nullptr) {
    auto* p = CreateMaybeMessage<::AssociatedTriple>(GetArenaForAllocation());
    _impl_.associated_c_ = p;
  }
  return _impl_.associated_c_;
}
inline ::AssociatedTriple* TripleShare::mutable_associated_c() {
  ::AssociatedTriple* _msg = _internal_mutable_associated_c();
  // @@protoc_insertion_point(field_mutable:TripleShare.associated_c)
  return _msg;
}
inline void TripleShare::set_allocated_associated_c(::AssociatedTriple* associated_c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.associated_c_;
  }
  if (associated_c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(associated_c);
    if (message_arena != submessage_arena) {
      associated_c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, associated_c, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.associated_c_ = associated_c;
  // @@protoc_insertion_point(field_set_allocated:TripleShare.associated_c)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Input_5fOutput_5fTriples_2eproto
